* major mode for .. clarify.. ?
** declare that mode as major mode for the interactive organize commands
* org block units (for org-ql transition probably)
#+begin_src emacs-lisp
  (defun stag-next-actions ()
    (let ((project-format-prefix
           (format " %%i %%-%d:(org-gtd-agenda--prefix-format) "
                   org-gtd-engage-prefix-width)))
      `(todo
        ,org-gtd-next
        ((org-agenda-overriding-header "All actions ready to be executed.")
         (org-agenda-prefix-format
          '((todo . ,project-format-prefix)))))))

  (defun stag-calendar-actions ()
    (let ((project-format-prefix
           (format " %%i %%-%d:(org-gtd-agenda--prefix-format) "
                   org-gtd-engage-prefix-width)))
      `(tags
        "+ORG_GTD_TIMESTAMP={.}"
        ((org-agenda-overriding-header "The whole calendar")
         (org-agenda-prefix-format
          '((todo . ,project-format-prefix)))))))

  (defun stag-delegated-actions ()
    (let ((project-format-prefix
           (format " %%i %%-%d:(org-gtd-agenda--prefix-format) "
                   org-gtd-engage-prefix-width)))
      `(tags
        ,(format "%s={.}/%s" org-gtd-delegate-property org-gtd-wait)
        ((org-agenda-overriding-header "Delegated items")
         (org-agenda-prefix-format
          '((todo . ,project-format-prefix)))))))

  (defun stag-habit-actions ()
    (let ((project-format-prefix
           (format " %%i %%-%d:(org-gtd-agenda--prefix-format) "
                   org-gtd-engage-prefix-width)))
      `(tags
        ,(format "+STYLE=\"Habits\"+ORG_GTD=\"%s\"" org-gtd-habit)
        ((org-agenda-overriding-header "Habits")
         (org-agenda-prefix-format
          '((todo . ,project-format-prefix)))))))

  (defun stag-incubated-actions ()
    (let ((project-format-prefix
           (format " %%i %%-%d:(org-gtd-agenda--prefix-format) "
                   org-gtd-engage-prefix-width)))
      `(tags
        ,(format "ORG_GTD=\"%s\"" org-gtd-incubate)
        ((org-agenda-overriding-header "Delegated items")
         (org-agenda-prefix-format
          '((todo . ,project-format-prefix)))))))

  (defun stag-today ()
    (let ((project-format-prefix
           (format " %%i %%-%d:(org-gtd-agenda--prefix-format) "
                   org-gtd-engage-prefix-width)))
      `(agenda
        ""
        ((org-agenda-span 1)
         (org-agenda-start-day nil)
         (org-agenda-skip-additional-timestamps-same-entry t)))))

  (defun stag-projects-in-area-of-focus (area)
    (let ((project-format-prefix
           (format " %%i %%-%d:(org-gtd-agenda--prefix-format) "
                   org-gtd-engage-prefix-width)))
      (when (not (member area org-gtd-areas-of-focus))
        (signal 'org-gtd-invalid-area-of-focus `(,area ,org-gtd-areas-of-focus)))
      `(tags ,org-gtd-project-headings
             ((org-agenda-overriding-header "Active projects"))
             ((org-agenda-skip-function '(org-gtd-skip-unless-area-of-focus ,area))))))

  (defun stag-next-in-area-of-focus (area)
    (let ((project-format-prefix
           (format " %%i %%-%d:(org-gtd-agenda--prefix-format) "
                   org-gtd-engage-prefix-width)))
      (when (not (member area org-gtd-areas-of-focus))
        (signal 'org-gtd-invalid-area-of-focus `(,area ,org-gtd-areas-of-focus)))
      `(todo ,org-gtd-next
             ((org-agenda-overriding-header "Next actions"))
             ((org-agenda-skip-function '(org-gtd-skip-unless-area-of-focus ,area))))))

#+end_src
* new engage
#+begin_src emacs-lisp
  (defun org-gtd-engage ()
  "Display `org-agenda' customized by org-gtd."
  (interactive)
  (org-gtd-core-prepare-agenda-buffers)
  (with-org-gtd-context
      (let* ((project-format-prefix
              (format " %%i %%-%d:(org-gtd-agenda--prefix-format) "
                      org-gtd-engage-prefix-width))
             (org-agenda-custom-commands
             `(("g" "Engage with GTD"
                ((agenda
                  ""
                  ((org-agenda-include-deadlines t)
                   (org-agenda-include-inactive-timestamps nil)
                                        ; org-agenda-todo-ignore-deadlines
                                        ; org-agenda-todo-ignore-scheduled
                   (org-agenda-skip-function
                    '(org-gtd-keep-ANY
                      '(org-gtd-skip-unless-calendar
                        org-gtd-skip-unless-habit
                        )))
                   (org-agenda-skip-deadline-if-done t)
                   (org-agenda-skip-scheduled-if-done t)
                   (org-agenda-skip-deadline-prewarning-if-scheduled nil)
                   (org-agenda-skip-scheduled-delay-if-deadline t)
                   (org-agenda-skip-scheduled-if-deadline-is-shown t)
                   (org-agenda-skip-timestamp-if-deadline-is-shown t)
                   (org-agenda-skip-timestamp-if-done t)
                   (org-agenda-span 1)
                   (org-agenda-skip-additional-timestamps-same-entry t)))
                 (todo org-gtd-next
                       ((org-agenda-overriding-header "All actions ready to be executed")
                        (org-agenda-prefix-format
                         '((todo . ,project-format-prefix))))))))))
        (org-agenda nil "g")
        (goto-char (point-min)))))
#+end_src


* types?
#+begin_src elisp
(setq action
      `((keyword . "NEXT")
        (properties . ((org_gtd . ((type . "string")
                                   (value . "Action")
                                   (selectable . nil)))
                       (id . ((type . "string")
                              (value . org-gtd-id-get-create)
                              (selectable . nil)))))))

(setq delegated
      '((keyword . "WAIT")
        (properties . ((id . ((type . "string")
                              (value . org-gtd-id-get-create)
                              (selectable . nil)))
                       (org_gtd_timestamp . ((type . "active-timestamp")
                                             (prompt . "Timestamp: ")
                                             (selectable . t)))
                       (org_gtd . ((type . "string")
                                   (value . "actions")
                                   (selectable . nil)))))))

(setq calendared
      '((properties . ((id . ((type . "string")
                              (value . org-gtd-id-get-create)
                              (selectable . nil)))
                       (org_gtd . ((type . "string")
                                   (value . "Calendar")
                                   (selectable . nil)))
                       (org_gtd_timestamp . ((type . "active-timestamp")
                                             (prompt . "Timestamp: ")
                                             (selectable . t)))))))

(setq habits
      '((keyword . "SCHEDULED")
        (properties . ((id . ((type . "string")
                              (value . org-gtd-id-get-create)
                              (selectable . nil)))
                       (org_gtd . ((type . "string")
                                   (value . "Habits")
                                   (selectable . nil)))
                       (style . ((type . "string")
                                 (value . "habit")
                                 (selectable . nil)))))))

(setq incubated
      '((properties . ((id . ((type . "string")
                              (value . org-gtd-id-get-create)
                              (selectable . nil)))
                       (org_gtd . ((type . "string")
                                   (value . "incubated")
                                   (selectable . nil)))
                       (org_gtd_timestamp . ((type . "active-timestamp")
                                             (prompt . "Timestamp: ")
                                             (selectable . t)))))))

(setq project
      '((properties . ((id . ((type . "string")
                              (value . org-gtd-id-get-create)
                              (selectable . nil)))
                       (org_gtd . ((type . "string")
                                   (value . "project")
                                   (selectable . nil)))
                       (trigger . ((type . "string")
                                   (value . "org-gtd-next-project-action org-gtd-update-project-task!")
                                   (selectable . nil)))
                       (first_action . ((type . "string")
                                        (value . org-gtd-id-get-create)
                                        (selectable . t)))))))

(setq project-action
      '((keyword . "TODO")
        (properties . ((org_gtd . ((type . "string")
                                   (value . "actions")
                                   (selectable . nil)))
                       (id . ((type . "string")
                              (value . org-gtd-id-get-create)
                              (selectable . nil)))
                       (parent_id . ((type . "string")
                                     (value . org-gtd-id-get-create)
                                     (selectable . t)))
                       (following-action . ((type . "string")
                                            (value . "")
                                            (selectable . t)))))))

(defun prompt-for-property (property-data)
  "Prompt the user for a value based on PROPERTY-DATA if it is selectable."
  (let ((type (cdr (assoc 'type property-data)))
        (prompt (cdr (assoc 'prompt property-data)))
        (selectable (cdr (assoc 'selectable property-data)))
        (value (cdr (assoc 'value property-data))))
    (if selectable
        (cond
         ((string-equal type "string")
          (read-string (format "%s: " prompt)))
         ((string-equal type "timestamp")
          (org-read-date nil nil nil prompt))
         ((string-equal type "active-timestamp")
          (prompt-for-date prompt))
         ((string-equal type "active-timestamp-with-repeater")
          (prompt-for-date-with-repeater))
         (t
          (read-string (format "%s: " prompt))))
      (if (functionp value)
          (funcall value)
        value))))

(defun prompt-for-date-with-repeater ()
  (let ((start-date (org-read-date nil nil nil "When do you want this repeating event to start?"))
        (repeater (read-from-minibuffer "How do you want this to repeat? ")))
    (format "<%s %s>" today repeater)))

(defun prompt-for-date (prompt)
  (let ((date (org-read-date nil nil nil prompt)))
    (format "<%s>" date)))

(defun make-new-heading (action-alist &optional epom)
  "Create a new org heading with the information from ACTION-ALIST at EPOM."
  (let ((epom (or epom (org-element-at-point)))
        (properties (cdr (assoc 'properties action-alist)))
        (keyword (cdr (assoc 'keyword action-alist))))
    ;; Navigate to EPOM
    (goto-char (org-element-property :begin epom))

    ;; Iterate over properties and set them
    (dolist (property properties)
      (let ((property-name (symbol-name (car property)))
            (property-data (cdr property)))
        (org-set-property property-name (prompt-for-property property-data))))
    ;; Set keyword if present
    (when keyword
      (org-todo keyword))))
#+end_src
